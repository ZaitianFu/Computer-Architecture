$date
	Tue Mar 13 02:26:50 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module timer_test $end
$var wire 32 ! cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 1 # TimerAddress $end
$var reg 1 $ MemRead $end
$var reg 1 % MemWrite $end
$var reg 32 & address [31:0] $end
$var reg 1 ' clock $end
$var reg 32 ( data [31:0] $end
$var reg 1 ) reset $end
$scope module t $end
$var wire 1 * Acknowledge $end
$var wire 1 $ MemRead $end
$var wire 1 % MemWrite $end
$var wire 1 # TimerAddress $end
$var wire 1 + TimerRead $end
$var wire 1 , TimerWrite $end
$var wire 32 - address [31:0] $end
$var wire 1 ' clock $end
$var wire 32 . data [31:0] $end
$var wire 1 / realreset $end
$var wire 1 ) reset $end
$var wire 1 0 storetime $end
$var wire 1 1 intlineenable $end
$var wire 1 2 gettime $end
$var wire 32 3 cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 32 4 QC [31:0] $end
$var wire 32 5 Q [31:0] $end
$var wire 32 6 DC [31:0] $end
$scope module cyclecounter $end
$var wire 1 ' clk $end
$var wire 1 7 enable $end
$var wire 1 ) reset $end
$var wire 32 8 d [31:0] $end
$var reg 32 9 q [31:0] $end
$upscope $end
$scope module cycleout $end
$var wire 1 + control $end
$var wire 32 : d [31:0] $end
$var wire 32 ; o [31:0] $end
$upscope $end
$scope module interuptcycle $end
$var wire 1 ' clk $end
$var wire 32 < d [31:0] $end
$var wire 1 , enable $end
$var wire 1 ) reset $end
$var reg 32 = q [31:0] $end
$upscope $end
$scope module interuptline $end
$var wire 1 ' clk $end
$var wire 1 > d $end
$var wire 1 1 enable $end
$var wire 1 / reset $end
$var reg 1 " q $end
$upscope $end
$scope module plus1 $end
$var wire 3 ? control [2:0] $end
$var wire 32 @ inA [31:0] $end
$var wire 32 A inB [31:0] $end
$var wire 32 B out [31:0] $end
$var wire 1 C zero $end
$var wire 1 D negative $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xD
xC
bx B
b1 A
bx @
b0 ?
1>
bx =
b0 <
bz ;
bx :
bx 9
bx 8
17
bx 6
bx 5
bx 4
bz 3
02
x1
00
1/
b0 .
b0 -
0,
0+
0*
1)
b0 (
0'
b0 &
0%
0$
0#
x"
bz !
$end
#5
0D
0C
b1 6
b1 8
b1 B
01
b11111111111111111111111111111111 5
b11111111111111111111111111111111 =
b0 4
b0 9
b0 :
b0 @
0"
1'
#10
b0 !
b0 3
b0 ;
1#
1+
0/
0'
1$
12
b11111111111111110000000000011100 &
b11111111111111110000000000011100 -
0)
#15
b10 6
b10 8
b10 B
b1 !
b1 3
b1 ;
b1 4
b1 9
b1 :
b1 @
1'
#20
0'
#25
b11 6
b11 8
b11 B
b10 !
b10 3
b10 ;
b10 4
b10 9
b10 :
b10 @
1'
#30
0'
#35
b100 6
b100 8
b100 B
b11 !
b11 3
b11 ;
b11 4
b11 9
b11 :
b11 @
1'
#40
0'
#45
b101 6
b101 8
b101 B
b100 !
b100 3
b100 ;
b100 4
b100 9
b100 :
b100 @
1'
#50
bz !
bz 3
bz ;
1,
0+
0'
1%
0$
b110 (
b110 .
b110 <
#55
b110 6
b110 8
b110 B
b101 4
b101 9
b101 :
b101 @
b110 5
b110 =
1'
#60
b101 !
b101 3
b101 ;
0,
1+
0'
0%
1$
#65
b111 6
b111 8
b111 B
b110 !
b110 3
b110 ;
11
b110 4
b110 9
b110 :
b110 @
1'
#70
0'
#75
b1000 6
b1000 8
b1000 B
b111 !
b111 3
b111 ;
1"
01
b111 4
b111 9
b111 :
b111 @
1'
#80
0'
#85
b1001 6
b1001 8
b1001 B
b1000 !
b1000 3
b1000 ;
b1000 4
b1000 9
b1000 :
b1000 @
1'
#90
0'
#95
b1010 6
b1010 8
b1010 B
b1001 !
b1001 3
b1001 ;
b1001 4
b1001 9
b1001 :
b1001 @
1'
#100
bz !
bz 3
bz ;
1/
0+
1*
0'
1%
0$
02
10
b11111111111111110000000001101100 &
b11111111111111110000000001101100 -
#105
b1011 6
b1011 8
b1011 B
b1010 4
b1010 9
b1010 :
b1010 @
0"
1'
#110
0'
