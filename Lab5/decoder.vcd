$date
	Sun Feb 18 15:26:48 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! writeenable $end
$var wire 1 " rd_src $end
$var wire 1 # except $end
$var wire 1 $ alu_src2 $end
$var wire 3 % alu_op [2:0] $end
$var reg 6 & funct [5:0] $end
$var reg 6 ' opcode [5:0] $end
$scope module decoder $end
$var wire 1 ( add $end
$var wire 1 $ alu_src2 $end
$var wire 1 ) and_ $end
$var wire 1 # except $end
$var wire 6 * funct [5:0] $end
$var wire 1 + nor_ $end
$var wire 6 , opcode [5:0] $end
$var wire 1 - or_ $end
$var wire 1 " rd_src $end
$var wire 1 . sub $end
$var wire 1 ! writeenable $end
$var wire 1 / xor_ $end
$var wire 1 0 xori $end
$var wire 1 1 ori $end
$var wire 1 2 andi $end
$var wire 3 3 alu_op [2:0] $end
$var wire 1 4 addi $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
04
b10 3
02
01
00
0/
0.
0-
b0 ,
0+
b100000 *
0)
1(
b0 '
b100000 &
b10 %
0$
0#
0"
1!
$end
#10
b11 %
b11 3
0(
1.
b100010 &
b100010 *
#20
